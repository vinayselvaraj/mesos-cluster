{
  "AWSTemplateFormatVersion" : "2010-09-09",
  
  "Description" : "Mesos Cluster CloudFormation Template:  This template creates a single master Mesos cluster",
  
  "Parameters" : {
    "MasterInstanceType" : {
      "Description" : "Mesos Master Instance Type",
      "Type" : "String",
      "Default" : "t2.micro"
    },
    "SlaveInstanceType" : {
      "Description" : "Mesos Slave Instance Type",
      "Type" : "String",
      "Default" : "t2.medium"
    },
    "KeyName" : {
      "Description" : "The EC2 Key Pair to allow SSH access to the instances",
      "Type" : "String",
      "Default" : "default"
    }
  },
  
  "Mappings" : {
    
    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "AMI" : "ami-146e2a7c" },
      "us-west-1"      : { "AMI" : "ami-42908907" },
      "us-west-2"      : { "AMI" : "ami-dfc39aef" },
      "eu-west-1"      : { "AMI" : "ami-9d23aeea" },
      "eu-central-1"   : { "AMI" : "ami-04003319" },
      "sa-east-1"      : { "AMI" : "ami-af9925b2" },
      "ap-southeast-1" : { "AMI" : "ami-96bb90c4" },
      "ap-southeast-2" : { "AMI" : "ami-d50773ef" },
      "ap-northeast-1" : { "AMI" : "ami-18869819" }
    }
  },
  
  "Resources" : {
    
    "MesosMasterEip" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },
    
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
        "EnableDnsHostnames" : "true"
      }
    },
    
    "IGW" : {
      "Type" : "AWS::EC2::InternetGateway"
    },
    
    "VPCGatewayAttachment" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "InternetGatewayId" : { "Ref" : "IGW" },
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    
    "VPCPublicSubnetRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    
    "VPCPublicIGWRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "VPCPublicSubnetRouteTable" },
        "GatewayId" : { "Ref" : "IGW"},
        "DestinationCidrBlock" : "0.0.0.0/0"
      }
    },
    
    "VPCPublicRouteTableAssocSubnetA" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "VPCPublicSubnetRouteTable" },
        "SubnetId" : { "Ref" : "SubnetA" }
      }
    },
    
    "VPCPublicRouteTableAssocSubnetB" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "VPCPublicSubnetRouteTable" },
        "SubnetId" : { "Ref" : "SubnetB" }
      }
    },
    
    "VPCPublicRouteTableAssocSubnetC" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "VPCPublicSubnetRouteTable" },
        "SubnetId" : { "Ref" : "SubnetC" }
      }
    },

    "VPCPublicRouteTableAssocSubnetD" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "VPCPublicSubnetRouteTable" },
        "SubnetId" : { "Ref" : "SubnetD" }
      }
    },
    
    "SubnetA" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.1.0/24",
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]}
      }
    },
    
    "SubnetB" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.2.0/24",
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ]}
      }
    },
    
    "SubnetC" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.3.0/24",
        "AvailabilityZone" : { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ]}
      }
    },

    "SubnetD" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.4.0/24",
        "AvailabilityZone" : { "Fn::Select" : [ "3", { "Fn::GetAZs" : "" } ]}
      }
    },
    
    "MesosSG" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Mesos Security Group",
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    
    "MesosSGSelfIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "MesosSG" },
        "IpProtocol" : "-1",
        "ToPort" : "65535",
        "FromPort" : "0",
        "SourceSecurityGroupId" : { "Ref" : "MesosSG" }
      }
    },
    
    "MesosMasterIAMRole" : {
      "Type": "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [ {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ "ec2.amazonaws.com" ]
            },
            "Action" : [ "sts:AssumeRole" ]
          }]
        },
        
        "Path" : "/",
        
        "Policies" : [ {
          "PolicyName" : "ControllerPolicy",
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [
              {
                "Effect":"Allow",
                "Action":"*",
                "Resource":"*"
              },
              {
                "Effect":"Deny",
                "Action":"iam:*",
                "Resource":"*"
              }
            ]
          }
        }]
      }
    },
    
    "MesosMasterInstProfile" : {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [ { "Ref" : "MesosMasterIAMRole" } ]
      }
    },
    
    "MesosMasterLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "ganglia" : [],
                "ganglia-gmetad" : [],
                "ganglia-gmond" : [],
                "ganglia-web" : []
              }
            },
            "files" : {
              "/tmp/associate_eip.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/bash\n",
                  "INSTANCE_ID=`curl -s  http://169.254.169.254/latest/meta-data/instance-id`\n",
                  "ALLOCATION_ID=", { "Fn::GetAtt" : [ "MesosMasterEip", "AllocationId" ]}, "\n",
                  "EC2_REGION=", { "Ref": "AWS::Region"}, "\n",
                  "aws ec2 --region $EC2_REGION associate-address --allocation-id $ALLOCATION_ID --instance-id $INSTANCE_ID --allow-reassociation\n"
                ]]},
                "mode" : "000755",
                "owner" : "root",
                "group" : "root"
              },
              "/tmp/setup.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/bash\n",
                  "until /tmp/associate_eip.sh\n",
                  "do\n",
                  "  sleep 15\n",
                  "done\n",
                  
                  "yum -y update\n",
                  "rpm -Uvh http://repos.mesosphere.io/el/6/noarch/RPMS/mesosphere-el-repo-6-2.noarch.rpm\n",
                  "yum -y install mesos marathon chronos\n",
                  
                  "rpm -Uvh http://archive.cloudera.com/cdh4/one-click-install/redhat/6/x86_64/cloudera-cdh-4-0.x86_64.rpm\n",
                  "yum -y install zookeeper zookeeper-server\n",
                  "zookeeper-server-initialize --myid=1\n",
                  "echo \"server.1=`host -s ", {"Ref" : "MesosMasterEip"}," |awk {'print $NF'} |sed 's/\\.$//g'`:2888:3888\" >> /etc/zookeeper/conf/zoo.cfg\n",
                  "chown -R zookeeper:zookeeper /var/lib/zookeeper\n",
                  "/sbin/chkconfig zookeeper-server on\n",
                  "/sbin/service zookeeper-server start\n",
                  
                  "# Skip: /etc/mesos/zk\n",
                  "# Skip: /etc/mesos-master/quorum\n",
                  
                  "start mesos-master\n",
                  "start marathon\n",
				  "start chronos\n",
                  
                  "echo manual |tee /etc/init/mesos-slave.override"

                ]]},
                "mode" : "000755",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "runSetup" : {
                "command" : "/tmp/setup.sh"
              }
            }
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "AssociatePublicIpAddress" : "true",
        "IamInstanceProfile" : { "Ref" : "MesosMasterInstProfile" },
        "ImageId" : {
          "Fn::FindInMap" : [
            "AWSRegionArch2AMI",
            { "Ref" : "AWS::Region" },
            "AMI"
          ]
        },
        "InstanceType" : { "Ref" : "MasterInstanceType" },
        "SecurityGroups" : [ { "Ref" : "MesosSG" } ],
        "UserData"        : {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "/opt/aws/bin/cfn-init --region ", 
                  { "Ref": "AWS::Region"}, 
                  " -s ", { "Ref" : "AWS::StackName" }, 
                  " -r MesosMasterLaunchConfig"
              ]
            ]
          }
        }
      }
    },
    
    "MesosMasterAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "LaunchConfigurationName" : { "Ref" : "MesosMasterLaunchConfig" },
        "VPCZoneIdentifier" : [ 
          { "Ref" : "SubnetA" },
          { "Ref" : "SubnetB" },
          { "Ref" : "SubnetC" },
          { "Ref" : "SubnetD" }
        ],
        "MinSize" : "1",
        "MaxSize" : "1",
        "Tags" : [
          { "Key" : "Name", "Value" : "mesos-master", "PropagateAtLaunch" : "true" }
        ]
      }
    },
    
    "MesosSlaveLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "docker" : [],
                "haproxy" : []
              }
            },
            "files" : {
              "/tmp/setup.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/bash\n",

                  
                  "yum -y update\n",
                  "rpm -Uvh http://repos.mesosphere.io/el/6/noarch/RPMS/mesosphere-el-repo-6-2.noarch.rpm\n",
                  "yum -y install mesos\n",
                  
                  
                  "echo \"zk://`host -s ", {"Ref" : "MesosMasterEip"}," |awk {'print $NF'} |sed 's/\\.$//g'`:2181/mesos\" > /etc/mesos/zk\n",
                  "echo '10mins' > /etc/mesos-slave/executor_registration_timeout\n",
                  "echo 'docker,mesos' > /etc/mesos-slave/containerizers\n",
                  
                  "/sbin/service docker start\n",
                  "start mesos-slave\n",
                  "echo manual >>  /etc/init/mesos-master.conf\n",
                  
                  "docker pull centos:latest"

                ]]},
                "mode" : "000755",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "runSetup" : {
                "command" : "/tmp/setup.sh"
              }
            },
            "services" : {
              "sysvinit" : {
                "haproxy" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "packages" : { "yum" : ["haproxy"] }
                }
              }
            }
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "AssociatePublicIpAddress" : "true",
        "ImageId" : {
          "Fn::FindInMap" : [
            "AWSRegionArch2AMI",
            { "Ref" : "AWS::Region" },
            "AMI"
          ]
        },
        "InstanceType" : { "Ref" : "SlaveInstanceType" },
        "SecurityGroups" : [ { "Ref" : "MesosSG" } ],
        "UserData"        : {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "/opt/aws/bin/cfn-init --region ", 
                  { "Ref": "AWS::Region"}, 
                  " -s ", { "Ref" : "AWS::StackName" }, 
                  " -r MesosSlaveLaunchConfig"
              ]
            ]
          }
        }
      }
    },
    
    "MesosSlaveAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "LaunchConfigurationName" : { "Ref" : "MesosSlaveLaunchConfig" },
        "VPCZoneIdentifier" : [ 
          { "Ref" : "SubnetA" },
          { "Ref" : "SubnetB" },
          { "Ref" : "SubnetC" },
          { "Ref" : "SubnetD" }
        ],
        "MinSize" : "3",
        "MaxSize" : "3",
        "LoadBalancerNames" : [ { "Ref" : "MesosSlaveELB" } ],
        "Tags" : [
          { "Key" : "Name", "Value" : "mesos-slave", "PropagateAtLaunch" : "true" }
        ]
      }
    },
    
    "MesosSlaveELB" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "Listeners": [
          {
            "LoadBalancerPort" : "80",
            "InstancePort": "80",
            "Protocol": "TCP"
          },
          {
            "LoadBalancerPort" : "443",
            "InstancePort": "443",
            "Protocol": "TCP"
          }
        ],
        
        "Subnets": [
          { "Ref" : "SubnetA" },
          { "Ref" : "SubnetB" },
          { "Ref" : "SubnetC" },
          { "Ref" : "SubnetD" }
        ],
        
        "HealthCheck": {
          "Target": "TCP:80",
          "HealthyThreshold": "3",
          "Interval": "5",
          "Timeout": "3",
          "UnhealthyThreshold": "2"
        },
        
        "ConnectionDrainingPolicy": {
          "Enabled" : "true",
          "Timeout" : "60"
        },
        
        "CrossZone": "true"
      }
    }
    
  }
  
}
